/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED! */
#ifndef __MMAP_MONITOR_BPF_SKEL_H__
#define __MMAP_MONITOR_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct mmap_monitor_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *mmap_monitor;
	} progs;
	struct {
		struct bpf_link *mmap_monitor;
	} links;
};

static void
mmap_monitor_bpf__destroy(struct mmap_monitor_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
mmap_monitor_bpf__create_skeleton(struct mmap_monitor_bpf *obj);

static inline struct mmap_monitor_bpf *
mmap_monitor_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct mmap_monitor_bpf *obj;
	int err;

	obj = (struct mmap_monitor_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = mmap_monitor_bpf__create_skeleton(obj);
	err = err ?: bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	mmap_monitor_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct mmap_monitor_bpf *
mmap_monitor_bpf__open(void)
{
	return mmap_monitor_bpf__open_opts(NULL);
}

static inline int
mmap_monitor_bpf__load(struct mmap_monitor_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct mmap_monitor_bpf *
mmap_monitor_bpf__open_and_load(void)
{
	struct mmap_monitor_bpf *obj;
	int err;

	obj = mmap_monitor_bpf__open();
	if (!obj)
		return NULL;
	err = mmap_monitor_bpf__load(obj);
	if (err) {
		mmap_monitor_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
mmap_monitor_bpf__attach(struct mmap_monitor_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
mmap_monitor_bpf__detach(struct mmap_monitor_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline int
mmap_monitor_bpf__create_skeleton(struct mmap_monitor_bpf *obj)
{
	struct bpf_object_skeleton *s;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)
		goto err;

	s->sz = sizeof(*s);
	s->name = "mmap_monitor_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs)
		goto err;

	s->progs[0].name = "mmap_monitor";
	s->progs[0].prog = &obj->progs.mmap_monitor;
	s->progs[0].link = &obj->links.mmap_monitor;

	s->data_sz = 752;
	s->data = (void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x30\x01\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x07\0\
\x01\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x4e\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x07\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x45\0\0\0\
\x11\0\x04\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\x02\x03\0\x2e\x74\x65\x78\x74\0\
\x6d\x6d\x61\x70\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\0\x74\x72\x61\x63\x65\x70\x6f\
\x69\x6e\x74\x2f\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\
\x74\x65\x72\x5f\x6d\x6d\x61\x70\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\
\x69\x67\0\x5f\x6c\x69\x63\x65\x6e\x73\x65\0\x6d\x6d\x61\x70\x5f\x6d\x6f\x6e\
\x69\x74\x6f\x72\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\
\x73\x79\x6d\x74\x61\x62\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x61\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xba\0\0\0\0\0\0\0\
\x71\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x46\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x37\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\
\xb8\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x69\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x58\0\0\0\0\0\0\
\0\x60\0\0\0\0\0\0\0\x01\0\0\0\x02\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return -ENOMEM;
}

#endif /* __MMAP_MONITOR_BPF_SKEL_H__ */
